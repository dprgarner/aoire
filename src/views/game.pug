extends layout

block content
  .container: .row: .col-md-12
    h1 Game

    table.table.table-striped.table-bordered
      tbody
        tr
          th Date
          td= new Date(game.startTime)
        tr
          th Room
          td= game.room
        tr
          th Games
          td #{game.nGames} (#{game.draws} draws)
        tr
          th Black
          td #{game.players[0]} (#{game.wins[0]} wins)
        tr
          th White
          td #{game.players[1]} (#{game.wins[1]} wins)

    .games
      each play, index in game.gameEvents
        .game.panel.panel-default(data-game-number=index)
          .panel-heading Game
          .panel-body
            .svg-parent !{baseSvg}
            .btn-group
              button(type=button).btn.btn-default.btn-start Start
              button(type=button).btn.btn-default.btn-prev Prev
              button(type=button).btn.btn-default.btn-next Next
              button(type=button).btn.btn-default.btn-end End

block end
  script window.game = !{JSON.stringify(game)};
  script.
    function renderInto(game, plays, playIndex, toIndex) {
      var $svg = game.find('svg');
      var $pieces = $svg.find('#pieces').empty();
      var $blackLabels = $svg.find('#black-labels').empty();
      var $whiteLabels = $svg.find('#white-labels').empty();
      var color = ['#Black01', '#White01'];
      var lables = [$blackLabels, $whiteLabels];

      for (var i = 0; i < toIndex; i++) {
        var move = plays[i];
        var el = document.createElementNS('http://www.w3.org/2000/svg', 'use');
        var x = (move[1] % 15) * 40;
        var y = Math.floor(move[1] / 15) * 40;
        var c = (i + playIndex) % 2;
        el.setAttribute('transform', 'translate(' + x + ', ' + y + ')');
        el.setAttributeNS('http://www.w3.org/1999/xlink', 'href', color[c]);
        $pieces.append(el)

        var text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', x);
        text.setAttribute('y', y + 6);
        text.appendChild(document.createTextNode(i + 1 + ''));
        lables[c].append(text)
      };

      game.data('curr-index', toIndex);
    }

    window.game.gameEvents.forEach(function (plays, i) {
      renderInto($('[data-game-number=' + i + ']'), plays, i, plays.length);
    });

    $('.btn-start').click(function () {
      var $game = $(this).parents('.game');
      var i = parseInt($game.attr('data-game-number'), 10);
      renderInto($game, window.game.gameEvents[i], i, 0);
    });

    $('.btn-end').click(function () {
      var $game = $(this).parents('.game');
      var i = parseInt($game.attr('data-game-number'), 10);
      var play = window.game.gameEvents[i];
      renderInto($game, play, i, play.length);
    });

    $('.btn-next').click(function () {
      var $game = $(this).parents('.game');
      var i = parseInt($game.attr('data-game-number'), 10);
      var moveIndex = parseInt($game.data('curr-index'), 10);
      var nextIndex = Math.min(moveIndex + 1, window.game.gameEvents[i].length);
      renderInto($game, window.game.gameEvents[i], i, nextIndex);
    });

    $('.btn-prev').click(function () {
      var $game = $(this).parents('.game');
      var i = parseInt($game.attr('data-game-number'), 10);
      var moveIndex = parseInt($game.data('curr-index'), 10);
      var nextIndex = Math.max(moveIndex - 1, 0);
      renderInto($game, window.game.gameEvents[i], i, nextIndex);
    });
